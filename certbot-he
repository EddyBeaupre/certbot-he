#!/usr/bin/env python3

import os
import re
import sys
import getopt
import configparser
import syslog
import shutil
import subprocess
import requests
import logging
import logging.handlers
import urllib.parse

VERSION = '0.30.0'


class certbotHook:
    def __init__(self, config, domainName, domainValidation, domainAuthOutput):
        try:
            domainName = domainName.replace('*.', '')
            recordName = '_acme-challenge.' + domainName
            domainValidation = urllib.parse.quote_plus(domainValidation)
            if config.has_option(domainName, 'Key'):
                domainKey = config[domainName]['Key']
                if domainAuthOutput == None:
                    logging.info('Updating txt record ' + recordName +
                                 ' with validation token ' + domainValidation)
                    reqResult = requests.post('https://dyn.dns.he.net/nic/update', data={
                                              'hostname': recordName, 'password': domainKey, 'txt': domainValidation})
                    logging.info(
                        'Post Result : ' + str(reqResult.status_code) + ', ' + reqResult.text)
                else:
                    logging.info('Cleaning up txt record ' + recordName)
                    reqResult = requests.post('https://dyn.dns.he.net/nic/update', data={
                                              'hostname': recordName, 'password': domainKey, 'txt': urllib.parse.quote_plus('Acme challenge key')})
                    logging.info(
                        'Post Result : ' + str(reqResult.status_code) + ', ' + reqResult.text)
            else:
                logging.error(
                    domainName + ' has no key, cannot update txt record')
        except:
            logging.exception('An exception occured')


class certbot:
    def validateConfig(self, config):
        if not config.has_option('DEFAULT', 'certbot'):
            cb = shutil.which('certbot')
        else:
            cb = shutil.which(config['DEFAULT']['certbot'])
        if cb == None:
            logging.error('cerbot not found')
        else:
            config['DEFAULT']['certbot'] = cb
            logging.info('cerbot path: ' + config['DEFAULT']['certbot'])
            if not config.has_option('DEFAULT', 'postHook'):
                config['DEFAULT']['postHook'] = None
            if not config.has_option('DEFAULT', 'certbotHe'):
                cb = shutil.which(os.path.basename(__file__))
            else:
                cb = shutil.which(config['DEFAULT']['certbotHe'])
            if cb == None:
                logging.error(os.path.basename(__file__) + ' not found')
            else:
                config['DEFAULT']['certbotHe'] = cb
                logging.info(os.path.basename(__file__) +
                             ' path: ' + config['DEFAULT']['certbotHe'])
                if not config.has_option('DEFAULT', 'KeySize'):
                    config['DEFAULT']['KeySize'] = 2048
                logging.info('Using Key Size ' + config['DEFAULT']['KeySize'])
                if config.has_option('DEFAULT', 'Email'):
                    return config
                else:
                    logging.error(
                        'Please define \'Email\' with your email address in the \'DEFAULT\' section of the configuration file')
        return none

    def getDomainList(self, config):
        try:
            domainList = []
            for item in config.items():
                if item[0] != 'DEFAULT':
                    logging.info('Checking domain ' + item[0] + ' options')
                    if config.has_option(item[0], 'Key'):
                        if config.has_option(item[0], 'Domain'):
                            if str2bool(config[item[0]]['Domain']):
                                logging.info('Adding domain ' +
                                             item[0] + ' to certificate request')
                                domainList.append(item[0])
                        if config.has_option(item[0], 'Wildcard'):
                            if str2bool(config[item[0]]['Wildcard']):
                                logging.info(
                                    'Adding wildcard domain *.' + item[0] + ' to certificate request')
                                domainList.append('*.' + item[0])
                        else:
                            logging.error(
                                'Domain ' + item[0] + ' has no key, skipping')
            return domainList
        except:
            return None

    def cmdCertbot(self, config, certMode, testCert, dryRun, agreeTos, expandCert, domainList):
        try:
            cmd = [config['DEFAULT']['certbot']]
            if certMode == 1:
                logging.info('command: certonly')
                cmd += ['certonly', '--email', config['DEFAULT']['Email'], '--manual',
                        '--manual-public-ip-logging-ok', '--domain', ','.join(domainList)]
            elif certMode == 2:
                logging.info('command: renew')
                cmd += ['renew']
            if testCert:
                logging.info('with option: --test-cert')
                cmd += ['--test-cert']
            if dryRun:
                logging.info('with option: --dry-run')
                cmd += ['--dry-run']
            if agreeTos:
                logging.info('with option: --agree-tos')
                cmd += ['--agree-tos']
            if expandCert:
                logging.info('with option: --expand')
                cmd += ['--expand']
            cmd += ['--preferred-challenges', 'dns', '--manual-auth-hook', config['DEFAULT']['certbotHe'],
                    '--manual-cleanup-hook', config['DEFAULT']['certbotHe'], '--rsa-key-size', config['DEFAULT']['KeySize'], '-n']
            if config['DEFAULT']['postHook']:
                cmd += ['--post-hook', config['DEFAULT']['postHook']]
            return cmd
        except:
            return None

    def __init__(self, config, certMode, testCert, dryRun, agreeTos, expandCert):
        config = self.validateConfig(config)
        if config:
            domainList = self.getDomainList(config)
            if domainList:
                cmd = self.cmdCertbot(
                    config, certMode, testCert, dryRun, agreeTos, expandCert, domainList)
                if cmd:
                    logging.info('Command: ' + ' '.join(cmd))
                    logging.info('Result: ' + subprocess.run(cmd,
                                                             stdout=subprocess.PIPE).stdout.decode('utf-8'))
                else:
                    logging.error('Error while creating command line')


def readEnviron(envVar):
    try:
        return os.environ[envVar]
    except:
        return None


def str2bool(v):
    try:
        return v.lower() in ("yes", "ye", "y", "true", "tru", "tr", "t", "oui", "ou", "o", "1")
    except:
        return False


def usage(cfgFile):
    try:
        print('Usage: ' + os.path.basename(__file__) +
              ' <COMMANDS> [OPTIONS]\n')
        print(os.path.basename(__file__) +
              ' can obtain HTTPS/TLS/SSL certificates. It will use')
        print('certbot-he-hook for obtaining certificate. COMMANDS and OPTIONS are:\n')
        print(
            '  certonly              Obtain or renew a certificate, but do not install it')
        print('  renew                 Renew all previously obtained certificates that are near expiry\n')
        print('  -t --test-cert        Obtain a test certificate from a staging server')
        print('  -d, --dry-run         Test "renew" or "certonly" without saving any certificates to disk')
        print('  -e, --expand          Expand and replace an existing certificate')
        print('  -a, --agree-tos       Agree to the ACME server\'s Subscriber Agreement\n')
        print('  -h, --help            Show this help screen')
        print('  -v, --version         Show version information\n')
        print('Configuration file is : ' + cfgFile)
        print('\nHelp and support: <https://github.com/EddyBeaupre/certbot-he>\n')
    except:
        logging.exception('An exception occured')


def version():
    try:
        print(os.path.basename(__file__) + ' version ' + VERSION)
        print('Copyright (C) 2019 Eddy Beaupre.')
        print('License MIT: The MIT Licence <https://opensource.org/licenses/MIT>.')
        print('This is free software: you are free to change and redistribute it.')
        print('There is NO WARRANTY, to the extent permitted by law.')
    except:
        logging.exception('An exception occured')


def main(argv):
    try:
        scriptName, scriptExtension = os.path.splitext(
            os.path.basename(__file__))
        handler = logging.handlers.SysLogHandler('/dev/log')
        formatter = logging.Formatter(
            scriptName + '[' + str(os.getpid()) + ']: %(message)s')
        handler.setFormatter(formatter)
        root = logging.getLogger()
        root.setLevel(os.environ.get("LOGLEVEL", "INFO"))
        root.addHandler(handler)
    except:
        syslog.syslog('Error while initializing logger')
        return os.EX_UNAVAILABLE

    try:
        logging.info(os.path.basename(__file__) +
                     ' version ' + VERSION + " initializing...")
        configFile = "/etc/" + scriptName + ".conf"

        if not os.path.isfile(configFile):
            logging.error('Configuration file ' + configFile + ' not found')
        else:
            logging.info('Reading configuration file ' + configFile)
            config = configparser.ConfigParser()
            config.sections()
            config.read(configFile)

            domainName = readEnviron('CERTBOT_DOMAIN')
            domainValidation = readEnviron('CERTBOT_VALIDATION')
            domainAuthOutput = readEnviron('CERTBOT_AUTH_OUTPUT')

            if domainName or domainValidation:
                cbh = certbotHook(config, domainName,
                                  domainValidation, domainAuthOutput)
            else:
                certMode = 0
                testCert = False
                dryRun = False
                agreeTos = False
                expandCert = False

                opts, args = getopt.gnu_getopt(argv, "htdaev", [
                                               'help', 'test-cert', 'dry-run', 'agree-tos', 'expand', 'version'])

                for opt, arg in opts:
                    if opt in ('-h', '--help'):
                        usage(configFile)
                        return os.EX_USAGE
                    elif opt in ('-v', '--version'):
                        version()
                        return os.EX_USAGE
                    elif opt in ('-t', '--test-cert'):
                        logging.info('Found option: --test-cert')
                        testCert = True
                    elif opt in ('-d', '--dry-run'):
                        logging.info('Found option: --dry-run')
                        dryRun = True
                    elif opt in ('-a', '--agree-tos'):
                        logging.info('Found option: --agree-tos')
                        agreeTos = True
                    elif opt in ('-e', '--expand'):
                        logging.info('Found option: --expand')
                        expandCert = True

                for arg in args:
                    if arg.startswith('c') and arg in ('certonly'):
                        if certMode == 0:
                            logging.info('Found command: certonly')
                            certMode = 1
                        else:
                            logging.error(
                                'Commands certonly and renew are mutually exclusive')
                            usage(configFile)
                            return os.EX_USAGE
                    elif arg.startswith('r') and arg in ('renew'):
                        if certMode == 0:
                            logging.info('Found command: renew')
                            certMode = 2
                        else:
                            logging.error(
                                'Commands renew and certonly are mutually exclusive')
                            usage(configFile)
                            return os.EX_USAGE
                if certMode == 0:
                    logging.error('No command found')
                    usage(configFile)
                    return os.EX_USAGE
                else:
                    cb = certbot(config, certMode, testCert,
                                 dryRun, agreeTos, expandCert)
        return os.EX_OK
    except:
        logging.exception('An exception occured')
        return os.EX_SOFTWARE


if __name__ == '__main__':
    exit(main(sys.argv[1:]))

# vim:et:sw=4:ts=4:ft=python:
